namespace Project_3310
{
    /// <summary>
    /// Перечисление всех существующих типов объектов
    /// </summary>
    enum ObjectType
    {
        NONE = 0,
        Wall,
        Treasure,
        Opened, 
        Key,
        Spawner
    }
    internal class Program
    {
        static void Main(string[] args)
        {

            /* Пример карты
             * char[,] map =
             {
                 {'#', '#', '#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#'  },
                 {'#', ' ', ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','#'  },
                 {'#', ' ', ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','#'  },
                 {'#', ' ', ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','#'  },
                 {'#', ' ', ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','#'  },
                 {'#', ' ', ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','#'  },
                 {'#', ' ', ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','#'  },
                 {'#', ' ', ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','*',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','#'  },
                 {'#', ' ', ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','#'  },
                 {'#', ' ', ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','#'  },
                 {'#', ' ', ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','#'  },
                 {'#', ' ', ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','#'  },
                 {'#', ' ', ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','#'  },
                 {'#', ' ', ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','#'  },
                 {'#', ' ', ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','#'  },
                 {'#', ' ', ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','#'  },
                 {'#', ' ', ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','#'  },
                 {'#', ' ', ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','#'  },
                 {'#', ' ', ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','#'  },
                 {'#', '#', '#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#'  },
             };*/

            #region Settings
            Console.CursorVisible = true;
            Player player;
            List<Behaviour> behaviours = new List<Behaviour>();
            bool isLevelLoaded = false;
            #endregion

            if (LevelEnvironment.ReadMapFromFile("map.txt"))
            {
                // Загрузка карты в консоль
                LoadLevelIntoConsole();
                player = new Player();
                behaviours.Add(player);
                isLevelLoaded= true;
            }
            else
            {
                Console.WriteLine("Empty map");
            }

            if (isLevelLoaded)
            {
                // Обновление состояний игры (получение управления, перемещение игрока и т.д)
                while (true)
                {
                    foreach (var behaviour in behaviours)
                    {
                        behaviour.Update();
                    }

                }
            }

        }
        /// <summary>
        /// Метод загрузки игрового поля в консоль
        /// </summary>
        /// <param name="levelEnv"></param>
        private static void LoadLevelIntoConsole()
        {
                Console.SetCursorPosition(0, 0);
                for (int i = 0; i < LevelEnvironment.Map.GetLength(0); i++)
                {
                    for (int j = 0; j < LevelEnvironment.Map.GetLength(1); j++)
                    {
                        Console.Write(LevelEnvironment.Map[i, j]);
                    }
                    Console.WriteLine();
                }
            
        }
    }
}